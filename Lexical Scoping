##Example: Caching the Mean of a Vector
##set the value of the vector
##get the value of the vector
##set the value of the mean
##get the value of the mean
#makeVector <- function(x = numeric()) {
#       m <- NULL
#       set <- function(y) {
#               x <<- y
#               m <<- NULL
#        }
#       get <- function() x
#       setmean <- function(mean) m <<- mean
#       getmean <- function() m
#       list(set = set, get = get,
#            setmean = setmean,
#            getmean = getmean)
#}

##imitation：Replacing the corresponding dimension
##set the value of the CacheMatrix
##get the value of the CacheMatrix
##set the value of the inverse
##get the value of the inverse

makeCacheMatrix <- function(x = matrix()) {
    inv <- NULL
    set <- function(y) {
         x <<- y
         inv <<- NULL
     }
     get <- function() x
     setInverse <- function(inverse) inv <<- inverse
     getInverse <- function() inv
     list(set = set,
          get = get,
          setInverse = setInverse,
          getInverse = getInverse)
 }



##it first checks to see if the mean has already been calculated. If so, it gets the mean from the cache and skips the computation. 
##Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function.
#cachemean <- function(x, ...) {
#        m <- x$getmean()
#        if(!is.null(m)) {
#                message("getting cached data")
#                return(m)
#        }
#        data <- x$get()
#        m <- mean(data, ...)
#        x$setmean(m)
#        m
#}


##imitation：Replace functions and dimension
 
 cacheSolve <- function(x, ...) {
     inv <- x$getInverse()
     if (!is.null(inv)) {
         message("getting cached data")
         return(inv)
     }
     mat <- x$get()
     inv <- solve(mat, ...)
     x$setInverse(inv)
     inv
 }
